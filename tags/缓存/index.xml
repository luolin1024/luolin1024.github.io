<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>缓存 on luolin1024</title>
    <link>https://luolin1024.github.io/tags/%E7%BC%93%E5%AD%98/</link>
    <description>Recent content in 缓存 on luolin1024</description>
    <generator>Hugo -- 0.114.0</generator>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 12 Feb 2025 00:18:22 +0800</lastBuildDate>
    <atom:link href="https://luolin1024.github.io/tags/%E7%BC%93%E5%AD%98/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>redis实现分布式锁——setnx</title>
      <link>https://luolin1024.github.io/blog_prepublish/pre-publish/redis%E5%AE%9E%E7%8E%B0%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81setnx/</link>
      <pubDate>Wed, 21 Feb 2024 11:30:51 +0800</pubDate>
      <guid>https://luolin1024.github.io/blog_prepublish/pre-publish/redis%E5%AE%9E%E7%8E%B0%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81setnx/</guid>
      <description>&lt;h3 id=&#34;setnx-key-value&#34;&gt;setnx key value&lt;/h3&gt;
&lt;p&gt;只在键 key 不存在的情况下， 将键 key 的值设置为 value 。若键 key 已经存在， 则 SETNX 命令不做任何动作。SETNX 是『SET if Not eXists』(如果不存在，则 SET)的简写。&lt;/p&gt;
&lt;h4 id=&#34;返回值&#34;&gt;返回值&lt;/h4&gt;
&lt;p&gt;命令在设置成功时返回 1 ， 设置失败时返回 0 。&lt;/p&gt;
&lt;h4 id=&#34;代码示例&#34;&gt;代码示例&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;redis&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;EXISTS&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;job&lt;/span&gt;                &lt;span class=&#34;err&#34;&gt;#&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;job&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;不存在&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;integer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;redis&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;SETNX&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;job&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;programmer&amp;#34;&lt;/span&gt;    &lt;span class=&#34;err&#34;&gt;#&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;job&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;设置成功&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;integer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;redis&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;SETNX&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;job&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;code-farmer&amp;#34;&lt;/span&gt;   &lt;span class=&#34;err&#34;&gt;#&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;尝试覆盖&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;job&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;，失败&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;integer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;redis&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;GET&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;job&lt;/span&gt;                   &lt;span class=&#34;err&#34;&gt;#&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;没有被覆盖&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;programmer&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;设计礼品领取的架构设计以及多次领取现象解决&#34;&gt;设计礼品领取的架构设计以及多次领取现象解决？&lt;/h3&gt;
&lt;p&gt;如果出现网络延迟的情况下，多个请求阻塞，那么恶意攻击就可以全部请求领取接口成功，而针对这种做法，我们使用setnx来解决，确保只有一个请求可以进入接口请求。

&lt;div class=&#34;post-img-view&#34;&gt;
&lt;a data-fancybox=&#34;gallery&#34; href=&#34;https://cdn.jsdelivr.net/gh/luolin1024/image@main/img/1645117816895-ccbf9f6b-5f2f-46d2-bd7c-2db282748c36.png&#34;&gt;
&lt;img src=&#34;https://cdn.jsdelivr.net/gh/luolin1024/image@main/img/1645117816895-ccbf9f6b-5f2f-46d2-bd7c-2db282748c36.png&#34; alt=&#34;36743255-cb14fd9be4e79418_fix732.png&#34;  /&gt;
&lt;/a&gt;
&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;下面，我们就专门讲解一下setnx，setnx可以用作分布式锁，但是&lt;strong&gt;这个场景并不是分布式锁的一个较好的实践，因为每个用户的key都是不一样的，我们主要是防止同一个用户恶意领取&lt;/strong&gt;，setnx本身是一个原子操作，可以保证多个线程只有一个能拿到锁，能返回true,其他的都会返回false。但是上面的做法，没有设置过期时间，在生产上一般是不可以这么使用。&lt;strong&gt;不设置过期时间的key多了之后，redis服务器很容易内存打满，这时候不知道哪些是强制依赖的，只能扩容，从代码层面去清理，如果直接清理不常用的，也很难保证不出事。&lt;/strong&gt;（基本不允许这么干，除非是基础数据，跟着服务器启动，写入redis的，不会变更的，比如城市数据，国家数据等等，当然，这些也可以考虑在本地内存中实现）如果在上面的代码中，加入超时时间，假设是一个月或者半年，流程变成这样：

&lt;div class=&#34;post-img-view&#34;&gt;
&lt;a data-fancybox=&#34;gallery&#34; href=&#34;https://cdn.jsdelivr.net/gh/luolin1024/image@main/img/1645117757034-021e0c3a-cb32-4ab7-8af1-3faecf013f2a.png&#34;&gt;
&lt;img src=&#34;https://cdn.jsdelivr.net/gh/luolin1024/image@main/img/1645117757034-021e0c3a-cb32-4ab7-8af1-3faecf013f2a.png&#34; alt=&#34;2313261960-15c3ed078a1820a7_fix732.png&#34;  /&gt;
&lt;/a&gt;
&lt;/div&gt;

设置key的超时时间使用expire,但是这样还有缺陷么？在redis 2.6.12之前，setnx和expire都不是原子操作，也就是很有可能在setnx成功之后，expire设置失败，也就不会有超时时间了。虽然这个影响在当前业务不是很大，但是还是一个小缺陷。Redis2.6.12以上版本，可以用set获取锁,set包含setnx和expire，实现了原子操作。也就是两步要么一起成功，要么一起失败。除此之外，上面的流程可能还存在的一个问题，是请求C服务的时候出现超时，然后删除key，恰好这个时候redis有问题，删除失败了，这个key就永远存在了。表现在业务上，就是A用户点击了领取，领取失败了，但是后面再怎么点，都是已经领取的状态了。&lt;strong&gt;那这种现象怎么优化呢？&lt;strong&gt;这种情况，其实已经是很少见的情况，按照我们当前的业务场景也看，就是当前的用户，redis记录了它已经领取过了，但是由于接口的失败，成功之后还没将mysql/其他数据库更新,两个数据库不一致了。我能想到的一个方法，就是再删除失败的时候，告警，并且将业务相关的数据记录下来，比如key，uid等等，针对这部分数据，做一次补发，或者手动删除key。或者，启动一个定时任务或者lua脚本，去判定redis和数据库不一致的情况，但是切记不要全部查询，应该是隔一段时间，查询最后增加的部分，做一个校验以及相应的处理。枚举key是十分耗时的操作！！！setnx 除了解决上面的问题，还可以应用在解决&lt;/strong&gt;缓存击穿&lt;/strong&gt;的问题上。譬如现在有热点数据，不仅在mysql数据库存储了，还在redis中存了一份缓存，那么如果有一个时间点，缓存失效了，这时候，大量的请求打过来，同时到达，缓存拿不到数据，都去数据库取数据，假设数据库操作比较耗时，那么压力全都在数据库服务器上了。这个时候所有的请求都去更新数据，明显是不合适的，应该是使用分布式锁，让一个线程去请求mysql一次即可。但是为了避免死锁的情况，如果超时，得及时额外释放锁，要不可能请求mysql都失败了，其他线程又拿不到锁，那么数据就会一直为null了。可以使用以下的命令：SETNX lock.foo &amp;lt;current Unix time + lock timeout + 1&amp;gt;&lt;/p&gt;
</description>
    </item>
    <item>
      <title>缓存一致性问题怎么解决</title>
      <link>https://luolin1024.github.io/blog_prepublish/%E6%8A%80%E6%9C%AF%E6%8F%90%E5%8D%87/%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/%E7%BC%93%E5%AD%98%E4%B8%80%E8%87%B4%E6%80%A7%E9%97%AE%E9%A2%98%E6%80%8E%E4%B9%88%E8%A7%A3%E5%86%B3/</link>
      <pubDate>Wed, 21 Feb 2024 11:30:51 +0800</pubDate>
      <guid>https://luolin1024.github.io/blog_prepublish/%E6%8A%80%E6%9C%AF%E6%8F%90%E5%8D%87/%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/%E7%BC%93%E5%AD%98%E4%B8%80%E8%87%B4%E6%80%A7%E9%97%AE%E9%A2%98%E6%80%8E%E4%B9%88%E8%A7%A3%E5%86%B3/</guid>
      <description>&lt;p&gt;关于Redis的其他的一些面试问题已经写过了，比如常见的缓存穿透、雪崩、击穿、热点的问题，但是还有一个比较麻烦的问题就是如何保证缓存一致性。对于缓存和数据库的操作，主要有以下两种方式。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;删除缓存，更新数据库&lt;/li&gt;
&lt;li&gt;删除缓存，更新数据库，sleep一段时间后再次删除缓存数据&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;先删缓存再更新数据库&#34;&gt;先删缓存，再更新数据库&lt;/h2&gt;
&lt;p&gt;先删除缓存，数据库还没有更新成功，此时如果读取缓存，缓存不存在，去数据库中读取到的是旧值，缓存不一致发生。


&lt;div class=&#34;post-img-view&#34;&gt;
&lt;a data-fancybox=&#34;gallery&#34; href=&#34;https://cdn.jsdelivr.net/gh/luolin1024/image@main/img/20231210174123.png&#34;&gt;
&lt;img src=&#34;https://cdn.jsdelivr.net/gh/luolin1024/image@main/img/20231210174123.png&#34; alt=&#34;image.png&#34;  /&gt;
&lt;/a&gt;
&lt;/div&gt;
&lt;/p&gt;
&lt;h2 id=&#34;解决方案&#34;&gt;解决方案&lt;/h2&gt;
&lt;h3 id=&#34;延时双删&#34;&gt;延时双删&lt;/h3&gt;
&lt;p&gt;延时双删的方案的思路是，为了避免更新数据库的时候，其他线程从缓存中读取不到数据，就在更新完数据库之后，再sleep一段时间，然后再次删除缓存。sleep的时间要对业务读写缓存的时间做出评估，sleep时间大于读写缓存的时间即可。流程如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;线程1删除缓存，然后去更新数据库&lt;/li&gt;
&lt;li&gt;线程2来读缓存，发现缓存已经被删除，所以直接从数据库中读取，这时候由于线程1还没有更新完成，所以读到的是旧值，然后把旧值写入缓存&lt;/li&gt;
&lt;li&gt;线程1，根据估算的时间，sleep，由于sleep的时间大于线程2读数据+写缓存的时间，所以缓存被再次删除&lt;/li&gt;
&lt;li&gt;如果还有其他线程来读取缓存的话，就会再次从数据库中读取到最新值


&lt;div class=&#34;post-img-view&#34;&gt;
&lt;a data-fancybox=&#34;gallery&#34; href=&#34;https://cdn.jsdelivr.net/gh/luolin1024/image@main/img/20231210174208.png&#34;&gt;
&lt;img src=&#34;https://cdn.jsdelivr.net/gh/luolin1024/image@main/img/20231210174208.png&#34; alt=&#34;image.png&#34;  /&gt;
&lt;/a&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;先更新数据库再删除缓存&#34;&gt;先更新数据库，再删除缓存&lt;/h2&gt;
&lt;p&gt;如果反过来操作，先更新数据库，再删除缓存呢？这个就更明显的问题了，更新数据库成功，如果删除缓存失败或者还没有来得及删除，那么，其他线程从缓存中读取到的就是旧值，还是会发生不一致。


&lt;div class=&#34;post-img-view&#34;&gt;
&lt;a data-fancybox=&#34;gallery&#34; href=&#34;https://cdn.jsdelivr.net/gh/luolin1024/image@main/img/20231210174115.png&#34;&gt;
&lt;img src=&#34;https://cdn.jsdelivr.net/gh/luolin1024/image@main/img/20231210174115.png&#34; alt=&#34;image.png&#34;  /&gt;
&lt;/a&gt;
&lt;/div&gt;
&lt;/p&gt;
&lt;h2 id=&#34;解决方案-1&#34;&gt;解决方案&lt;/h2&gt;
&lt;h3 id=&#34;消息队列&#34;&gt;消息队列&lt;/h3&gt;
&lt;p&gt;这是网上很多文章里都有写过的方案。但是这个方案的缺陷会更明显一点。先更新数据库，成功后往消息队列发消息，消费到消息后再删除缓存，借助消息队列的重试机制来实现，达到最终一致性的效果。

&lt;div class=&#34;post-img-view&#34;&gt;
&lt;a data-fancybox=&#34;gallery&#34; href=&#34;https://cdn.jsdelivr.net/gh/luolin1024/image@main/img/1645120973994-37c35061-7099-48e8-b674-0298f3699a64.webp&#34;&gt;
&lt;img src=&#34;https://cdn.jsdelivr.net/gh/luolin1024/image@main/img/1645120973994-37c35061-7099-48e8-b674-0298f3699a64.webp&#34; alt=&#34;&#34;  /&gt;
&lt;/a&gt;
&lt;/div&gt;

这个解决方案其实问题更多。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;引入消息中间件之后，问题更复杂了，怎么保证消息不丢失更麻烦&lt;/li&gt;
&lt;li&gt;就算更新数据库和删除缓存都没有发生问题，消息的延迟也会带来短暂的不一致性，不过这个延迟相对来说还是可以接受的&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;进阶版消息队列&#34;&gt;进阶版消息队列&lt;/h3&gt;
&lt;p&gt;为了解决缓存一致性的问题单独引入一个消息队列，太复杂了。其实，一般大公司本身都会有监听binlog消息的消息队列存在，主要是为了做一些核对的工作。这样，我们可以借助监听binlog的消息队列来做删除缓存的操作。这样做的好处是，不用你自己引入，侵入到你的业务代码中，中间件帮你做了解耦，同时，中间件的这个东西本身就保证了高可用。当然，这样消息延迟的问题依然存在，但是相比单纯引入消息队列的做法更好一点。而且，如果并发不是特别高的话，这种做法的实时性和一致性都还算可以接受的。

&lt;div class=&#34;post-img-view&#34;&gt;
&lt;a data-fancybox=&#34;gallery&#34; href=&#34;https://cdn.jsdelivr.net/gh/luolin1024/image@main/img/1645120973964-e1bc7b86-a9a7-4f29-a59a-1acfe9ea23ae.webp&#34;&gt;
&lt;img src=&#34;https://cdn.jsdelivr.net/gh/luolin1024/image@main/img/1645120973964-e1bc7b86-a9a7-4f29-a59a-1acfe9ea23ae.webp&#34; alt=&#34;&#34;  /&gt;
&lt;/a&gt;
&lt;/div&gt;
&lt;/p&gt;
&lt;h2 id=&#34;其他解决方案&#34;&gt;其他解决方案&lt;/h2&gt;
&lt;h3 id=&#34;设置缓存过期时间&#34;&gt;设置缓存过期时间&lt;/h3&gt;
&lt;p&gt;每次放入缓存的时候，设置一个过期时间，比如5分钟，以后的操作只修改数据库，不操作缓存，等待缓存超时后从数据库重新读取。如果对于一致性要求不是很高的情况，可以采用这种方案。这个方案还会有另外一个问题，就是如果数据更新的特别频繁，不一致性的问题就很大了。在实际生产中，我们有一些活动的缓存数据是使用这种方式处理的。因为活动并不频繁发生改变，而且对于活动来说，短暂的不一致性并不会有什么大的问题。&lt;/p&gt;
&lt;h2 id=&#34;为什么是删除而不是更新缓存&#34;&gt;为什么是删除，而不是更新缓存？&lt;/h2&gt;
&lt;p&gt;我们以&lt;strong&gt;先更新数据库，再删除缓存&lt;/strong&gt;来举例。如果是更新的话，那就是&lt;strong&gt;先更新数据库，再更新缓存&lt;/strong&gt;。举个例子：如果数据库1小时内更新了1000次，那么缓存也要更新1000次，但是这个缓存可能在1小时内只被读取了1次，那么这1000次的更新有必要吗？反过来，如果是删除的话，就算数据库更新了1000次，那么也只是做了1次缓存删除，只有当缓存真正被读取的时候才去数据库加载。&lt;/p&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;首先，我们要明确一点，缓存不是更新，而应该是删除。删除缓存有两种方式：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;先删除缓存，再更新数据库。解决方案是使用延迟双删。&lt;/li&gt;
&lt;li&gt;先更新数据库，再删除缓存。解决方案是消息队列或者其他binlog同步，引入消息队列会带来更多的问题，并不推荐直接使用。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;针对缓存一致性要求不是很高的场景，那么只通过设置超时时间就可以了。其实，如果不是很高的并发，无论你选择先删缓存还是后删缓存的方式，都几乎很少能产生这种问题，但是在高并发下，你应该知道怎么解决问题。&lt;/p&gt;
</description>
    </item>
    <item>
      <title>缓存穿透，缓存击穿和缓存雪崩的区别以及解决方案</title>
      <link>https://luolin1024.github.io/2024/02/cache-penetration-and-cache-breakdown-and-cache-avalanche-and-the-solution/</link>
      <pubDate>Wed, 21 Feb 2024 11:30:51 +0800</pubDate>
      <guid>https://luolin1024.github.io/2024/02/cache-penetration-and-cache-breakdown-and-cache-avalanche-and-the-solution/</guid>
      <description>&lt;h2 id=&#34;1-概述&#34;&gt;1. 概述&lt;/h2&gt;
&lt;p&gt;在高并发系统中，缓存是提升性能、降低数据库压力的重要组件。然而，在实际应用中，缓存可能会遇到三种典型问题：&lt;strong&gt;缓存穿透&lt;/strong&gt;、&lt;strong&gt;缓存击穿&lt;/strong&gt;和&lt;strong&gt;缓存雪崩&lt;/strong&gt;。这些问题如果不加以妥善处理，可能会导致数据库负载激增，甚至影响整个系统的稳定性。本文将详细介绍这三种问题的区别，并探讨相应的解决方案。&lt;/p&gt;
&lt;h2 id=&#34;2-什么是缓存穿透缓存击穿和缓存雪崩&#34;&gt;2. 什么是缓存穿透、缓存击穿和缓存雪崩？&lt;/h2&gt;
&lt;h3 id=&#34;21-缓存穿透cache-penetration&#34;&gt;2.1 缓存穿透（Cache Penetration）&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;现象&lt;/strong&gt;：指的是缓存和数据库中都没有的数据，但却被&lt;strong&gt;大量请求&lt;/strong&gt;访问，导致请求直接落到数据库上，增加数据库的压力。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;速记口诀&lt;/strong&gt;：&lt;strong&gt;恶意请求绕过缓存，访问数据库中不存在的数据，导致数据库负载增加。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;22-缓存击穿cache-breakdown&#34;&gt;2.2 缓存击穿（Cache Breakdown）&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;现象&lt;/strong&gt;：某个&lt;strong&gt;热点数据&lt;/strong&gt;在缓存中过期的瞬间，刚好有&lt;strong&gt;大量请求&lt;/strong&gt;同时到达，此时所有请求都会直接访问数据库，可能会导致数据库压力激增。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;速记口诀&lt;/strong&gt;：&lt;strong&gt;缓存数据突然失效，大量请求瞬间涌向数据库。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;23-缓存雪崩cache-avalanche&#34;&gt;2.3 缓存雪崩（Cache Avalanche）&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;现象&lt;/strong&gt;：&lt;strong&gt;大量缓存&lt;/strong&gt;在同一时间过期，使得所有原本应命中缓存的请求都直接访问数据库，造成数据库负载飙升，甚至引发全局性故障。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;速记口诀&lt;/strong&gt;：&lt;strong&gt;大量缓存同时失效，流量直击数据库，引发系统风险。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;3-解决方案&#34;&gt;3. 解决方案&lt;/h2&gt;
&lt;h3 id=&#34;31-缓存穿透解决方案&#34;&gt;3.1 缓存穿透解决方案&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;方案 1：使用布隆过滤器（Bloom Filter）&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在缓存层引入布隆过滤器，提前存储可能存在的数据标识，对于不存在的数据，直接拦截请求，避免打到数据库。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;方案 2：缓存空值&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;针对数据库和缓存均不存在的数据，可以在缓存中存储一个&lt;strong&gt;短时间有效&lt;/strong&gt;的空值（如 &lt;code&gt;5 分钟&lt;/code&gt;），减少对数据库的冲击。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;32-缓存击穿解决方案&#34;&gt;3.2 缓存击穿解决方案&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;方案 1：设置热点数据永不过期&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对于高频访问的热点数据，可以设置&lt;strong&gt;永不过期&lt;/strong&gt;，确保缓存始终存在，避免瞬间失效造成数据库负载激增。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;方案 2：互斥锁机制&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在缓存数据为空时，采用互斥锁（如 &lt;code&gt;setnx&lt;/code&gt; 方式），确保只有一个请求能查询数据库并更新缓存，其他请求需等待或短暂休眠后重试。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;public static String getProductDescById(String id) {
    String desc = redis.get(id);
    if (desc == null) {
        if (redis.setnx(&amp;#34;lock_id&amp;#34;, 1, 60) == 1) {
            try {
                desc = getFromDB(id);
                redis.set(id, desc, 60 * 60 * 24);
            } catch (Exception ex) {
                LogHelper.error(ex);
            } finally {
                redis.del(&amp;#34;lock_id&amp;#34;);
                return desc;
            }
        } else {
            Thread.sleep(200);
            return getProductDescById(id);
        }
    }
    return desc;
}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;33-缓存雪崩解决方案&#34;&gt;3.3 缓存雪崩解决方案&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;方案 1：设置缓存过期时间随机化&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;避免大量缓存同时过期，可以在设定缓存时增加一个随机波动值。例如，原定 &lt;code&gt;10 分钟&lt;/code&gt; 过期的缓存，可以随机增加 &lt;code&gt;1~3 分钟&lt;/code&gt;，使过期时间分布在 &lt;code&gt;7~13 分钟&lt;/code&gt; 之间。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;redis.set(id, value, 60 * 60 + Math.random() * 1000);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;方案 2：热点数据分片存储&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过&lt;strong&gt;分布式缓存架构&lt;/strong&gt;（如 Redis Cluster），将不同热点数据分布存储在&lt;strong&gt;不同的节点/机房&lt;/strong&gt;，防止单点故障引发缓存雪崩。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;方案 3：双层缓存机制（A/B 缓存）&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;维护两层缓存：&lt;strong&gt;A 缓存（正常过期）&lt;/strong&gt; 和 &lt;strong&gt;B 缓存（不过期）&lt;/strong&gt;。当 &lt;code&gt;A&lt;/code&gt; 缓存失效时，读取 &lt;code&gt;B&lt;/code&gt; 缓存，并&lt;strong&gt;异步更新&lt;/strong&gt; &lt;code&gt;**A**&lt;/code&gt; &lt;strong&gt;缓存&lt;/strong&gt;，确保数据一致性。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;4-总结&#34;&gt;4. 总结&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;问题&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;定义&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;触发条件&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;影响&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;解决方案&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;缓存穿透&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;访问数据库中不存在的数据，导致所有请求直接打到数据库&lt;/td&gt;
&lt;td&gt;缓存和数据库都无数据&lt;/td&gt;
&lt;td&gt;数据库负载增加&lt;/td&gt;
&lt;td&gt;布隆过滤器、缓存空值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;缓存击穿&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;热点数据过期的瞬间，大量请求同时访问数据库&lt;/td&gt;
&lt;td&gt;高并发下，某个热点数据突然失效&lt;/td&gt;
&lt;td&gt;数据库瞬时压力飙升&lt;/td&gt;
&lt;td&gt;设置永不过期、互斥锁机制&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;缓存雪崩&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;大量缓存数据同时过期，导致数据库负载剧增&lt;/td&gt;
&lt;td&gt;大量缓存数据设定相同的过期时间&lt;/td&gt;
&lt;td&gt;可能影响整个系统&lt;/td&gt;
&lt;td&gt;随机化过期时间、热点数据分片、双层缓存&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;缓存作为高并发架构中的重要组成部分，合理的缓存设计可以极大提升系统的性能，降低数据库负载。然而，面对缓存穿透、缓存击穿和缓存雪崩等问题，我们需要根据具体场景采取相应的防范措施，确保系统的稳定性和可靠性。&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Java本地缓存</title>
      <link>https://luolin1024.github.io/blog_prepublish/%E6%8A%80%E6%9C%AF%E6%8F%90%E5%8D%87/java/java%E6%9C%AC%E5%9C%B0%E7%BC%93%E5%AD%98/</link>
      <pubDate>Sat, 11 Feb 2023 00:32:19 +0800</pubDate>
      <guid>https://luolin1024.github.io/blog_prepublish/%E6%8A%80%E6%9C%AF%E6%8F%90%E5%8D%87/java/java%E6%9C%AC%E5%9C%B0%E7%BC%93%E5%AD%98/</guid>
      <description>&lt;h3 id=&#34;前言&#34;&gt;前言&lt;/h3&gt;
&lt;p&gt;对一个java后台开发者而言，提到缓存，第一反应就是redis和memcache。利用这类缓存足以解决大多数的性能问题了，并且java针对这两者也都有非常成熟的api可供使用。但是我们也要知道，这两种都属于remote cache（分布式缓存），应用的进程和缓存的进程通常分布在不同的服务器上，不同进程之间通过RPC或HTTP的方式通信。这种缓存的优点是缓存和应用服务解耦，支持大数据量的存储，缺点是数据要经过网络传输，性能上会有一定损耗。与分布式缓存对应的是本地缓存，缓存的进程和应用进程是同一个，数据的读写都在一个进程内完成，这种方式的优点是没有网络开销，访问速度很快。缺点是受JVM内存的限制，不适合存放大数据。本篇文章我们主要主要讨论Java本地缓存的的一些常用方案。&lt;/p&gt;
&lt;h3 id=&#34;本地缓存常用技术&#34;&gt;本地缓存常用技术&lt;/h3&gt;
&lt;p&gt;本地缓存和应用同属于一个进程，使用不当会影响服务稳定性，所以通常需要考虑更多的因素，例如容量限制、过期策略、淘汰策略、自动刷新等。常用的本地缓存方案有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;根据HashMap自实现本地缓存&lt;/li&gt;
&lt;li&gt;Guava Cache&lt;/li&gt;
&lt;li&gt;Caffeine&lt;/li&gt;
&lt;li&gt;Encache&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;总体来说，对于本地缓存的方案中，笔者比较推荐Caffeine，性能上遥遥领先。虽然Encache功能更为丰富，甚至提供了持久化和集群的功能，但是这些功能完全可以依靠其他方式实现。真实的业务工程中，建议使用Caffeine作为本地缓存，另外使用redis或者memcache作为分布式缓存，构造多级缓存体系，保证性能和可靠性。下面分别进行介绍：&lt;/p&gt;
&lt;h4 id=&#34;1-根据hashmap自定义实现本地缓存&#34;&gt;1. 根据HashMap自定义实现本地缓存&lt;/h4&gt;
&lt;p&gt;缓存的本质就是存储在内存中的KV数据结构，对应的就是jdk中的HashMap，但是要实现缓存，还需要考虑并发安全性、容量限制等策略，下面简单介绍一种利用LinkedHashMap实现缓存的方式：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;LRUCache&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;LinkedHashMap&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;     &lt;span class=&#34;cm&#34;&gt;/**      * 可重入读写锁，保证并发读写安全性      */&lt;/span&gt;     &lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ReentrantReadWriteLock&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;readWriteLock&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ReentrantReadWriteLock&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;     &lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Lock&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;readLock&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;readWriteLock&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;readLock&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;     &lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Lock&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;writeLock&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;readWriteLock&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;writeLock&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;     &lt;span class=&#34;cm&#34;&gt;/**      * 缓存大小限制      */&lt;/span&gt;     &lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;maxSize&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;     &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;LRUCache&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;maxSize&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;         &lt;span class=&#34;kd&#34;&gt;super&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;maxSize&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;1.0f&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;         &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;maxSize&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;maxSize&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;     &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;     &lt;span class=&#34;nd&#34;&gt;@Override&lt;/span&gt;     &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Object&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Object&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;         &lt;span class=&#34;n&#34;&gt;readLock&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;lock&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;         &lt;span class=&#34;k&#34;&gt;try&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;             &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;super&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;         &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;finally&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;             &lt;span class=&#34;n&#34;&gt;readLock&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;unlock&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;         &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;     &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;     &lt;span class=&#34;nd&#34;&gt;@Override&lt;/span&gt;     &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Object&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;put&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Object&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Object&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;         &lt;span class=&#34;n&#34;&gt;writeLock&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;lock&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;         &lt;span class=&#34;k&#34;&gt;try&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;             &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;super&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;put&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;         &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;finally&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;             &lt;span class=&#34;n&#34;&gt;writeLock&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;unlock&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;         &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;     &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;     &lt;span class=&#34;nd&#34;&gt;@Override&lt;/span&gt;     &lt;span class=&#34;kd&#34;&gt;protected&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;boolean&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;removeEldestEntry&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Map&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;Entry&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;eldest&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;         &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;maxSize&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;     &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;复制代码LinkedHashMap维持了一个链表结构，用来存储节点的插入顺序或者访问顺序（二选一），并且内部封装了一些业务逻辑，只需要覆盖removeEldestEntry方法，便可以实现缓存的LRU淘汰策略。此外我们利用读写锁，保障缓存的并发安全性。需要注意的是，这个示例并不支持过期时间淘汰的策略。自实现缓存的方式，优点是实现简单，不需要引入第三方包，比较适合一些简单的业务场景。缺点是如果需要更多的特性，需要定制化开发，成本会比较高，并且稳定性和可靠性也难以保障。对于比较复杂的场景，建议使用比较稳定的开源工具。&lt;/p&gt;
&lt;h4 id=&#34;2-基于guava-cache实现本地缓存&#34;&gt;2. 基于Guava Cache实现本地缓存&lt;/h4&gt;
&lt;p&gt;Guava是Google团队开源的一款 Java 核心增强库，包含集合、并发原语、缓存、IO、反射等工具箱，性能和稳定性上都有保障，应用十分广泛。Guava Cache支持很多特性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;支持最大容量限制&lt;/li&gt;
&lt;li&gt;支持两种过期删除策略（插入时间和访问时间）&lt;/li&gt;
&lt;li&gt;支持简单的统计功能&lt;/li&gt;
&lt;li&gt;基于LRU算法实现&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Guava Cache的使用非常简单，首先需要引入maven包：&lt;!-- raw HTML omitted --&gt;     &lt;!-- raw HTML omitted --&gt;com.google.guava&lt;!-- raw HTML omitted --&gt;     &lt;!-- raw HTML omitted --&gt;guava&lt;!-- raw HTML omitted --&gt;     &lt;!-- raw HTML omitted --&gt;18.0&lt;!-- raw HTML omitted --&gt; &lt;!-- raw HTML omitted --&gt; 复制代码一个简单的示例代码如下：public class GuavaCacheTest {     public static void main(String[] args) throws Exception {         //创建guava cache         Cache&amp;lt;String, String&amp;gt; loadingCache = CacheBuilder.newBuilder()                 //cache的初始容量                 .initialCapacity(5)                 //cache最大缓存数                 .maximumSize(10)                 //设置写缓存后n秒钟过期                 .expireAfterWrite(17, TimeUnit.SECONDS)                 //设置读写缓存后n秒钟过期,实际很少用到,类似于expireAfterWrite                 //.expireAfterAccess(17, TimeUnit.SECONDS)                 .build();         String key = &amp;ldquo;key&amp;rdquo;;         // 往缓存写数据         loadingCache.put(key, &amp;ldquo;v&amp;rdquo;);         // 获取value的值，如果key不存在，调用collable方法获取value值加载到key中再返回         String value = loadingCache.get(key, new Callable&lt;!-- raw HTML omitted --&gt;() {             @Override             public String call() throws Exception {                 return getValueFromDB(key);             }         });         // 删除key         loadingCache.invalidate(key);     }     private static String getValueFromDB(String key) {         return &amp;ldquo;v&amp;rdquo;;     } } 复制代码总体来说，Guava Cache是一款十分优异的缓存工具，功能丰富，线程安全，足以满足工程化使用，以上代码只介绍了一般的用法，实际上springboot对guava也有支持，利用配置文件或者注解可以轻松集成到代码中。&lt;/p&gt;
&lt;h4 id=&#34;3-caffeine&#34;&gt;3. Caffeine&lt;/h4&gt;
&lt;p&gt;Caffeine是基于java8实现的新一代缓存工具，缓存性能接近理论最优。可以看作是Guava Cache的增强版，功能上两者类似，不同的是Caffeine采用了一种结合LRU、LFU优点的算法：W-TinyLFU，在性能上有明显的优越性。Caffeine的使用，首先需要引入maven包：&lt;!-- raw HTML omitted --&gt;     &lt;!-- raw HTML omitted --&gt;com.github.ben-manes.caffeine&lt;!-- raw HTML omitted --&gt;     &lt;!-- raw HTML omitted --&gt;caffeine&lt;!-- raw HTML omitted --&gt;     &lt;!-- raw HTML omitted --&gt;2.5.5&lt;!-- raw HTML omitted --&gt; &lt;!-- raw HTML omitted --&gt; 复制代码使用上和Guava Cache基本类似：public class CaffeineCacheTest {     public static void main(String[] args) throws Exception {         //创建guava cache         Cache&amp;lt;String, String&amp;gt; loadingCache = Caffeine.newBuilder()                 //cache的初始容量                 .initialCapacity(5)                 //cache最大缓存数                 .maximumSize(10)                 //设置写缓存后n秒钟过期                 .expireAfterWrite(17, TimeUnit.SECONDS)                 //设置读写缓存后n秒钟过期,实际很少用到,类似于expireAfterWrite                 //.expireAfterAccess(17, TimeUnit.SECONDS)                 .build();         String key = &amp;ldquo;key&amp;rdquo;;         // 往缓存写数据         loadingCache.put(key, &amp;ldquo;v&amp;rdquo;);         // 获取value的值，如果key不存在，获取value后再返回         String value = loadingCache.get(key, CaffeineCacheTest::getValueFromDB);         // 删除key         loadingCache.invalidate(key);     }     private static String getValueFromDB(String key) {         return &amp;ldquo;v&amp;rdquo;;     } } 复制代码相比Guava Cache来说，Caffeine无论从功能上和性能上都有明显优势。同时两者的API类似，使用Guava Cache的代码很容易可以切换到Caffeine，节省迁移成本。需要注意的是，SpringFramework5.0（SpringBoot2.0）同样放弃了Guava Cache的本地缓存方案，转而使用Caffeine。&lt;/p&gt;
&lt;h4 id=&#34;4-encache&#34;&gt;4. Encache&lt;/h4&gt;
&lt;p&gt;Encache是一个纯Java的进程内缓存框架，具有快速、精干等特点，是Hibernate中默认的CacheProvider。同Caffeine和Guava Cache相比，Encache的功能更加丰富，扩展性更强：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;支持多种缓存淘汰算法，包括LRU、LFU和FIFO&lt;/li&gt;
&lt;li&gt;缓存支持堆内存储、堆外存储、磁盘存储（支持持久化）三种&lt;/li&gt;
&lt;li&gt;支持多种集群方案，解决数据共享问题&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Encache的使用，首先需要导入maven包：&lt;!-- raw HTML omitted --&gt;     &lt;!-- raw HTML omitted --&gt;org.ehcache&lt;!-- raw HTML omitted --&gt;     &lt;!-- raw HTML omitted --&gt;ehcache&lt;!-- raw HTML omitted --&gt;     &lt;!-- raw HTML omitted --&gt;3.8.0&lt;!-- raw HTML omitted --&gt; &lt;!-- raw HTML omitted --&gt; 复制代码以下是一个简单的使用案例：public class EncacheTest {     public static void main(String[] args) throws Exception {         // 声明一个cacheBuilder         CacheManager cacheManager = CacheManagerBuilder.newCacheManagerBuilder()                 .withCache(&amp;ldquo;encacheInstance&amp;rdquo;, CacheConfigurationBuilder                         //声明一个容量为20的堆内缓存                         .newCacheConfigurationBuilder(String.class,String.class, ResourcePoolsBuilder.heap(20)))                 .build(true);         // 获取Cache实例         Cache&amp;lt;String,String&amp;gt; myCache =  cacheManager.getCache(&amp;ldquo;encacheInstance&amp;rdquo;, String.class, String.class);         // 写缓存         myCache.put(&amp;ldquo;key&amp;rdquo;,&amp;ldquo;v&amp;rdquo;);         // 读缓存         String value = myCache.get(&amp;ldquo;key&amp;rdquo;);         // 移除换粗         cacheManager.removeCache(&amp;ldquo;myCache&amp;rdquo;);         cacheManager.close();     } } 复制代码&lt;/p&gt;
&lt;h3 id=&#34;总结&#34;&gt;总结&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;从易用性角度，Guava Cache、Caffeine和Encache都有十分成熟的接入方案，使用简单。&lt;/li&gt;
&lt;li&gt;从功能性角度，Guava Cache和Caffeine功能类似，都是只支持堆内缓存，Encache相比功能更为丰富&lt;/li&gt;
&lt;li&gt;从性能上进行比较，Caffeine最优、GuavaCache次之，Encache最差(下图是三者的性能对比结果）&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
  </channel>
</rss>
